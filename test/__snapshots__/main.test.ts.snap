// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "BRUpdaterBottleRocketUpdateLG86D2BED1": Object {
      "Export": Object {
        "Name": "BrUpdaterLogGroupName",
      },
      "Value": Object {
        "Ref": "BRUpdaterUpdaterLogGroup920D5B89",
      },
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsservicebottlerocketawsecs1x8664110imageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/bottlerocket/aws-ecs-1/x86_64/1.1.0/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "ASGCPBR36AA03E1": Object {
      "Properties": Object {
        "AutoScalingGroupProvider": Object {
          "AutoScalingGroupArn": Object {
            "Ref": "BRASG2257C3F7",
          },
          "ManagedScaling": Object {
            "Status": "ENABLED",
            "TargetCapacity": 100,
          },
          "ManagedTerminationProtection": "DISABLED",
        },
      },
      "Type": "AWS::ECS::CapacityProvider",
    },
    "BRASG2257C3F7": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "BRASGLaunchConfig61CBA3AE",
        },
        "MaxSize": "10",
        "MinSize": "0",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "test/BRASG",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "DemoVPCPrivateSubnet1Subnet577398CC",
          },
          Object {
            "Ref": "DemoVPCPrivateSubnet2SubnetBF71F3B1",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "BRASGDrainECSHookFunction03974671": Object {
      "DependsOn": Array [
        "BRASGDrainECSHookFunctionServiceRoleDefaultPolicy12A5F86E",
        "BRASGDrainECSHookFunctionServiceRole640A3737",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)
  
  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  \\"\\"\\"Fetch tasks for a container instance ARN.\\"\\"\\"
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']
  
  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']
    
  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "DemoECSCluster76E5C18A",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BRASGDrainECSHookFunctionServiceRole640A3737",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BRASGDrainECSHookFunctionAllowInvoketestBRASGLifecycleHookDrainHookTopicA9A1401846C5DB61": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "BRASGDrainECSHookFunction03974671",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "BRASGLifecycleHookDrainHookTopicB0ECC25F",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BRASGDrainECSHookFunctionServiceRole640A3737": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BRASGDrainECSHookFunctionServiceRoleDefaultPolicy12A5F86E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "BRASG2257C3F7",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "DemoECSCluster76E5C18A",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DemoECSCluster76E5C18A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "DemoECSCluster76E5C18A",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRASGDrainECSHookFunctionServiceRoleDefaultPolicy12A5F86E",
        "Roles": Array [
          Object {
            "Ref": "BRASGDrainECSHookFunctionServiceRole640A3737",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BRASGDrainECSHookFunctionTopicF6E7DDA8": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "BRASGDrainECSHookFunction03974671",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "BRASGLifecycleHookDrainHookTopicB0ECC25F",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "BRASGInstanceProfileA7C5C296": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "BRASGInstanceRole00AFD8BB",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "BRASGInstanceRole00AFD8BB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BRASGInstanceRoleDefaultPolicy89636FC6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DemoECSCluster76E5C18A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "DemoECSCluster76E5C18A",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRASGInstanceRoleDefaultPolicy89636FC6",
        "Roles": Array [
          Object {
            "Ref": "BRASGInstanceRole00AFD8BB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BRASGInstanceSecurityGroup3753F933": Object {
      "Properties": Object {
        "GroupDescription": "test/BRASG/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "BRASGLaunchConfig61CBA3AE": Object {
      "DependsOn": Array [
        "BRASGInstanceRoleDefaultPolicy89636FC6",
        "BRASGInstanceRole00AFD8BB",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "BRASGInstanceProfileA7C5C296",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsservicebottlerocketawsecs1x8664110imageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "BRASGInstanceSecurityGroup3753F933",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "
[settings.ecs]
cluster = \\"",
                Object {
                  "Ref": "DemoECSCluster76E5C18A",
                },
                "\\"",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "BRASGLifecycleHookDrainHook11FC4416": Object {
      "DependsOn": Array [
        "BRASGLifecycleHookDrainHookRoleDefaultPolicyADA8D95D",
        "BRASGLifecycleHookDrainHookRole933763BC",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "BRASG2257C3F7",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "BRASGLifecycleHookDrainHookTopicB0ECC25F",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "BRASGLifecycleHookDrainHookRole933763BC",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "BRASGLifecycleHookDrainHookRole933763BC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BRASGLifecycleHookDrainHookRoleDefaultPolicyADA8D95D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "BRASGLifecycleHookDrainHookTopicB0ECC25F",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRASGLifecycleHookDrainHookRoleDefaultPolicyADA8D95D",
        "Roles": Array [
          Object {
            "Ref": "BRASGLifecycleHookDrainHookRole933763BC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BRASGLifecycleHookDrainHookTopicB0ECC25F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/BRASG",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "BRService33B41A71": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "CapacityProvider": Object {
              "Ref": "ASGCPBR36AA03E1",
            },
            "Weight": 1,
          },
        ],
        "Cluster": Object {
          "Ref": "DemoECSCluster76E5C18A",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 6,
        "EnableECSManagedTags": false,
        "PlacementStrategies": Array [
          Object {
            "Field": "memory",
            "Type": "binpack",
          },
          Object {
            "Field": "cpu",
            "Type": "binpack",
          },
        ],
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": Object {
          "Ref": "ECSTaskDef925013F7",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "BRUpdaterRebootCommand0D896623": Object {
      "Properties": Object {
        "Content": Object {
          "description": "Bottlerocket - Reboot",
          "mainSteps": Array [
            Object {
              "action": "aws:runShellScript",
              "inputs": Object {
                "runCommand": Array [
                  "apiclient reboot",
                ],
                "timeoutSeconds": "1800",
              },
              "name": "Reboot",
              "precondition": Object {
                "StringEquals": Array [
                  "platformType",
                  "Linux",
                ],
              },
            },
          ],
          "schemaVersion": "2.2",
        },
        "DocumentType": "Command",
        "Name": "RebootCommandtest",
      },
      "Type": "AWS::SSM::Document",
    },
    "BRUpdaterScheduleRuleF09E9E8D": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DemoECSCluster76E5C18A",
                "Arn",
              ],
            },
            "EcsParameters": Object {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": Object {
                "AwsVpcConfiguration": Object {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "BRUpdaterUpdaterTaskDefSecurityGroup80DE4E38",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": Array [
                    Object {
                      "Ref": "DemoVPCPrivateSubnet1Subnet577398CC",
                    },
                    Object {
                      "Ref": "DemoVPCPrivateSubnet2SubnetBF71F3B1",
                    },
                  ],
                },
              },
              "TaskCount": 1,
              "TaskDefinitionArn": Object {
                "Ref": "BRUpdaterUpdaterTaskDef6D220FE3",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "BRUpdaterUpdaterTaskDefEventsRole9C4572AA",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "BRUpdaterUpdateApplyCommand5DBAF6E1": Object {
      "Properties": Object {
        "Content": Object {
          "description": "Bottlerocket - Apply update",
          "mainSteps": Array [
            Object {
              "action": "aws:runShellScript",
              "inputs": Object {
                "runCommand": Array [
                  "apiclient update apply",
                ],
                "timeoutSeconds": "1800",
              },
              "name": "ApplyUpdate",
              "precondition": Object {
                "StringEquals": Array [
                  "platformType",
                  "Linux",
                ],
              },
            },
          ],
          "schemaVersion": "2.2",
        },
        "DocumentType": "Command",
        "Name": "UpdateApplyCommandtest",
      },
      "Type": "AWS::SSM::Document",
    },
    "BRUpdaterUpdateCheckCommand1C47325B": Object {
      "Properties": Object {
        "Content": Object {
          "description": "Bottlerocket - Check available updates",
          "mainSteps": Array [
            Object {
              "action": "aws:runShellScript",
              "inputs": Object {
                "runCommand": Array [
                  "apiclient update check",
                ],
                "timeoutSeconds": "1800",
              },
              "name": "CheckUpdate",
              "precondition": Object {
                "StringEquals": Array [
                  "platformType",
                  "Linux",
                ],
              },
            },
          ],
          "schemaVersion": "2.2",
        },
        "DocumentType": "Command",
        "Name": "UpdateCheckCommandtest",
      },
      "Type": "AWS::SSM::Document",
    },
    "BRUpdaterUpdaterLogGroup920D5B89": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 1,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "BRUpdaterUpdaterTaskDef6D220FE3": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "-cluster",
              Object {
                "Ref": "DemoECSCluster76E5C18A",
              },
              "-region",
              Object {
                "Ref": "AWS::Region",
              },
              "-check-document",
              "UpdateCheckCommandtest",
              "-apply-document",
              "UpdateApplyCommandtest",
              "-reboot-document",
              "RebootCommandtest",
            ],
            "Essential": true,
            "Image": "public.ecr.aws/bottlerocket/bottlerocket-ecs-updater:v0.1.0",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "BRUpdaterUpdaterLogGroup920D5B89",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "brUpdaterEcsTask",
              },
            },
            "Name": "UpdaterContainer",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "BRUpdaterUpdaterTaskDefExecutionRole6D52C55B",
            "Arn",
          ],
        },
        "Family": "testBRUpdaterUpdaterTaskDefB5CF7A7F",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "BRUpdaterUpdaterTaskDefTaskRoleB1326A0E",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "BRUpdaterUpdaterTaskDefEventsRole9C4572AA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "BRUpdaterUpdaterTaskDefEventsRoleDefaultPolicy8F5BD436": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:RunTask",
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "DemoECSCluster76E5C18A",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "BRUpdaterUpdaterTaskDef6D220FE3",
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "BRUpdaterUpdaterTaskDefExecutionRole6D52C55B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "BRUpdaterUpdaterTaskDefTaskRoleB1326A0E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRUpdaterUpdaterTaskDefEventsRoleDefaultPolicy8F5BD436",
        "Roles": Array [
          Object {
            "Ref": "BRUpdaterUpdaterTaskDefEventsRole9C4572AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BRUpdaterUpdaterTaskDefExecutionRole6D52C55B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "BRUpdaterUpdaterTaskDefExecutionRoleDefaultPolicy43EF950B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "BRUpdaterUpdaterLogGroup920D5B89",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRUpdaterUpdaterTaskDefExecutionRoleDefaultPolicy43EF950B",
        "Roles": Array [
          Object {
            "Ref": "BRUpdaterUpdaterTaskDefExecutionRole6D52C55B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BRUpdaterUpdaterTaskDefSecurityGroup80DE4E38": Object {
      "Properties": Object {
        "GroupDescription": "test/BRUpdater/UpdaterTaskDef/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "BRUpdaterUpdaterTaskDefTaskRoleB1326A0E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "BRUpdaterUpdaterTaskDefTaskRoleDefaultPolicy863B5FD8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:ListContainerInstances",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DemoECSCluster76E5C18A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:ListTasks",
                "ecs:UpdateContainerInstancesState",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "DemoECSCluster76E5C18A",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:GetCommandInvocation",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:ListTasks",
                "ecs:UpdateContainerInstancesState",
                "ecs:DescribeTasks",
                "ec2:DescribeInstanceStatus",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:SendCommand",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":document/UpdateCheckCommandtest",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":document/UpdateApplyCommandtest",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":document/RebootCommandtest",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ec2:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":instance/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BRUpdaterUpdaterTaskDefTaskRoleDefaultPolicy863B5FD8",
        "Roles": Array [
          Object {
            "Ref": "BRUpdaterUpdaterTaskDefTaskRoleB1326A0E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DemoECSCluster76E5C18A": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "DemoECSClusterAEF07540": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          Object {
            "Ref": "ASGCPBR36AA03E1",
          },
        ],
        "Cluster": Object {
          "Ref": "DemoECSCluster76E5C18A",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "DemoVPC2409DB3F": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "DemoVPCIGWD7695CC8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "DemoVPCPrivateSubnet1DefaultRouteA9EB711D": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "DemoVPCPublicSubnet1NATGateway301A7B38",
        },
        "RouteTableId": Object {
          "Ref": "DemoVPCPrivateSubnet1RouteTable12D271CE",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "DemoVPCPrivateSubnet1RouteTable12D271CE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "DemoVPCPrivateSubnet1RouteTableAssociationFD4C440A": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "DemoVPCPrivateSubnet1RouteTable12D271CE",
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPrivateSubnet1Subnet577398CC",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "DemoVPCPrivateSubnet1Subnet577398CC": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "DemoVPCPrivateSubnet2DefaultRoute92C2830D": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "DemoVPCPublicSubnet2NATGatewayA2C150AC",
        },
        "RouteTableId": Object {
          "Ref": "DemoVPCPrivateSubnet2RouteTable700990FB",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "DemoVPCPrivateSubnet2RouteTable700990FB": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "DemoVPCPrivateSubnet2RouteTableAssociationB6F32155": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "DemoVPCPrivateSubnet2RouteTable700990FB",
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPrivateSubnet2SubnetBF71F3B1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "DemoVPCPrivateSubnet2SubnetBF71F3B1": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "DemoVPCPublicSubnet1DefaultRoute22933307": Object {
      "DependsOn": Array [
        "DemoVPCVPCGW5132360C",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "DemoVPCIGWD7695CC8",
        },
        "RouteTableId": Object {
          "Ref": "DemoVPCPublicSubnet1RouteTable833A1DC8",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "DemoVPCPublicSubnet1EIPFF4AD3A2": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "DemoVPCPublicSubnet1NATGateway301A7B38": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "DemoVPCPublicSubnet1EIPFF4AD3A2",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPublicSubnet1SubnetB6592B34",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "DemoVPCPublicSubnet1RouteTable833A1DC8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "DemoVPCPublicSubnet1RouteTableAssociationC64BEC15": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "DemoVPCPublicSubnet1RouteTable833A1DC8",
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPublicSubnet1SubnetB6592B34",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "DemoVPCPublicSubnet1SubnetB6592B34": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "DemoVPCPublicSubnet2DefaultRoute30D76A52": Object {
      "DependsOn": Array [
        "DemoVPCVPCGW5132360C",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "DemoVPCIGWD7695CC8",
        },
        "RouteTableId": Object {
          "Ref": "DemoVPCPublicSubnet2RouteTableA55BFCCD",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "DemoVPCPublicSubnet2EIP03E095AC": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "DemoVPCPublicSubnet2NATGatewayA2C150AC": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "DemoVPCPublicSubnet2EIP03E095AC",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPublicSubnet2Subnet980625E0",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "DemoVPCPublicSubnet2RouteTableA55BFCCD": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "DemoVPCPublicSubnet2RouteTableAssociationE7A0B7A1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "DemoVPCPublicSubnet2RouteTableA55BFCCD",
        },
        "SubnetId": Object {
          "Ref": "DemoVPCPublicSubnet2Subnet980625E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "DemoVPCPublicSubnet2Subnet980625E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/DemoVPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "DemoVPCVPCGW5132360C": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "DemoVPCIGWD7695CC8",
        },
        "VpcId": Object {
          "Ref": "DemoVPC2409DB3F",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ECSTaskDef925013F7": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 100,
            "Essential": true,
            "Image": "public.ecr.aws/nginx/nginx:latest",
            "Memory": 100,
            "Name": "Demo",
          },
        ],
        "Family": "testECSTaskDefFFD5DA0D",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "ECSTaskDefTaskRoleF66749D3",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ECSTaskDefTaskRoleF66749D3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
